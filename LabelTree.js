'use strict'
const data = [
    {
        "MAC": "DC:EE:06:22",
        "标签/Weight": "书籍阅读=8, 休闲爱好=3, 厂商/华为=100, 品类消费水平/餐饮消费水平/中=43, 城市/上海市=85, 年龄/35-44=88, 影视音乐/关注节目/东方看大剧=49, 影视音乐/关注节目/军事报道=57, 影视音乐/关注节目/加速前进=84, 影视音乐/关注节目/大玩家特搜队=49, 影视音乐/关注节目/速度与激情6=73, 影视音乐/关注节目/锦绣未央=52, 影视音乐/关注节目/防务新观察=54, 影视音乐/关注频道/CCTV-6=55, 影视音乐/关注频道/CCTV-7=55, 影视音乐/关注频道/SITV五星体育=53, 影视音乐/关注频道/(点播)=54, 影视音乐/关注频道/东方卫视=53, 影视音乐/关注频道/东方电影台=53, 影视音乐/关注频道/北京卫视=55, 影视音乐/关注频道/嘉佳卡通频道=56, 性别/男=91, 所在行业/日化百货=12, 教育水平/高中及以下=67, 汽车/中档汽车=3, 汽车=21, 消费水平/高=51, 游戏=4, 省份/上海市=90, 终端/厂商/*=100, 终端/型号/*=100, 职业类别/文职人员=70, 资产状况/无车=88, 软件应用/旅游出行/出租车=67, 软件应用/旅游出行/地图导航=76, 软件应用/旅游出行=88, 软件应用/理财购物/支付=89, 软件应用/理财购物=89, 软件应用/生活实用/天气=98, 软件应用/生活实用/运动健身=97, 软件应用/生活实用=99, 软件应用/社交通讯/电话=17, 软件应用/社交通讯=17, 软件应用=96"
    },
    {
        "MAC": "C8:F2:30:58",
        "标签/Weight": "厂商/OPPO=100, 品类消费水平/餐饮消费水平/低=50, 商务服务=8, 城市/上海市=85, 年龄/25-34=79, 影视音乐/关注节目/CCTV空中剧院=68, 影视音乐/关注节目/一线=87, 影视音乐/关注节目/一路欢笑=70, 影视音乐/关注节目/一鸣惊人=52, 影视音乐/关注节目/三国演义=74, 影视音乐/关注节目/世界斯诺克锦标赛=48, 影视音乐/关注节目/东方时空=57, 影视音乐/关注节目/中国新闻=53, 影视音乐/关注节目/九州大戏台=54, 影视音乐/关注节目/于成龙=64, 影视音乐/关注节目/光影星播客=51, 影视音乐/关注节目/共同关注=73, 影视音乐/关注节目/农广天地=52, 影视音乐/关注节目/动物世界=52, 影视音乐/关注节目/回声嘹亮=48, 影视音乐/关注节目/地理·中国=57, 影视音乐/关注节目/大内密探灵灵狗=56, 影视音乐/关注节目/大话西游3=41, 影视音乐/关注节目/天天把歌唱=54, 影视音乐/关注节目/天网=73, 影视音乐/关注节目/央视元宵晚会=37, 影视音乐/关注节目/寰宇视野=50, 影视音乐/关注节目/小镇大法官=50, 影视音乐/关注节目/开门大吉=54, 影视音乐/关注节目/我爱发明=51, 影视音乐/关注节目/文化十分=48, 影视音乐/关注节目/文明密码=53, 影视音乐/关注节目/新少林寺=47, 影视音乐/关注节目/新闻30分=52, 影视音乐/关注节目/新闻周刊=48, 影视音乐/关注节目/新闻直播间=56, 影视音乐/关注节目/新闻联播=55, 影视音乐/关注节目/无人驾驶=73, 影视音乐/关注节目/时代=49, 影视音乐/关注节目/星光大道=57, 影视音乐/关注节目/普法栏目剧=62, 影视音乐/关注节目/梨园闯关我挂帅=72, 影视音乐/关注节目/横冲直撞好莱坞=50, 影视音乐/关注节目/法律讲堂=69, 影视音乐/关注节目/热线12=52, 影视音乐/关注节目/烽火长城线=70, 影视音乐/关注节目/焦点访谈=52, 影视音乐/关注节目/环球视线=50, 影视音乐/关注节目/真相=50, 影视音乐/关注节目/纪录片=45, 影视音乐/关注节目/绣春刀=85, 影视音乐/关注节目/综艺喜乐汇=51, 影视音乐/关注节目/自然传奇=58, 影视音乐/关注节目/越战越勇=50, 影视音乐/关注节目/远方的家=51, 影视音乐/关注节目/锦绣梨园=70, 影视音乐/关注节目/雍正王朝=50, 影视音乐/关注节目/零零大冒险=47, 影视音乐/关注节目/青年霍元甲之冲出江湖=52, 影视音乐/关注节目/黄飞鸿之狮王争霸=82, 影视音乐/关注节目/黄飞鸿之王者之风=49, 影视音乐/关注频道/CCTV-10=58, 影视音乐/关注频道/CCTV-11=77, 影视音乐/关注频道/CCTV-12=78, 影视音乐/关注频道/CCTV-3=57, 影视音乐/关注频道/CCTV-4=54, 影视音乐/关注频道/CCTV-5=56, 影视音乐/关注频道/CCTV-6=63, 影视音乐/关注频道/CCTV-7=53, 影视音乐/关注频道/CCTV-8=57, 影视音乐/关注频道/CCTV-少儿=54, 影视音乐/关注频道/CCTV-新闻=62, 影视音乐/关注频道/CCTV-纪录=53, 影视音乐/关注频道/(点播)=60, 影视音乐/关注频道/环球购物=56, 影视音乐=20, 性别/男=99, 房产/房屋租赁=44, 房产=44, 教育水平/大专=57, 旅游酒店=59, 汽车/购车阶段/买车调研=44, 汽车/购车阶段/学车考驾照=51, 汽车=79, 消费水平/高=60, 生活服务=19, 省份/上海市=90, 终端/厂商/*=100, 终端/型号/*=100, 网络购物/比价=3, 网络购物=3, 资产状况/有车=100, 资讯=58, 软件应用/影音图像/音乐=64, 软件应用/影音图像=64, 软件应用/旅游出行/出租车=96, 软件应用/旅游出行/地图导航=94, 软件应用/旅游出行=97, 软件应用/理财购物/银行=91, 软件应用/理财购物=91, 软件应用/社交通讯/婚恋=58, 软件应用/社交通讯/电话=91, 软件应用/社交通讯/论坛=90, 软件应用/社交通讯=95, 软件应用/系统工具/搜索=15, 软件应用/系统工具=15, 软件应用=96"
    },
    {
        "MAC": "B0:E2:35:09",
        "标签/Weight": "个护美容/美发=33, 个护美容/美甲=27, 个护美容=63, 书籍阅读/报刊杂志=22, 书籍阅读/时代网络小说/近现代=61, 书籍阅读/玄幻网络小说/异界大陆=28, 书籍阅读/玄幻网络小说=43, 书籍阅读/言情网络小说/耽美言情=55, 书籍阅读/言情网络小说=82, 书籍阅读/都市网络小说/转世异能=56, 书籍阅读/都市网络小说=74, 书籍阅读=94, 休闲爱好/书法=8, 休ying's闲爱好/摄影=48, 休闲爱好=79, 体育健身/台球=42, 体育健身=74, 医疗健康/西医=7, 医疗健康=90, 厂商/小米=100, 品类消费水平/餐饮消费水平/低=78, 商务服务/广告服务=28, 商务服务=51, 城市/常州市=85, 家电数码/个人护理电器/剃须刀=9, 家电数码/个人护理电器=31, 家电数码/手机/智能机=70, 家电数码/手机=85, 家电数码/智能设备/智能手环=31, 家电数码/智能设备/智能手表=31, 家电数码/智能设备/运动跟踪器=31, 家电数码/智能设备=31, 家电数码/电脑/电脑外设=23, 家电数码/电脑/笔记本=70, 家电数码/电脑=76, 家电数码=91, 年龄/35-44=96, 影视音乐/关注明星/林心如=25, 影视音乐/关注明星=64, 影视音乐/关注频道/(点播)=54, 影视音乐/动漫=20, 影视音乐/演出票务/电影票=72, 影视音乐/电影=40, 影视音乐/电视剧/关注导演=10, 影视音乐/电视剧/关注电视剧=10, 影视音乐/电视剧/制片国家_地区=10, 影视音乐/电视剧/类型=10, 影视音乐/综艺/关注综艺节目=51, 影视音乐/综艺/地区=51, 影视音乐/综艺=51, 影视音乐=93, 性别/女=83, 房产/买房=28, 房产/新房=28, 房产=28, 所在行业/教育=26, 教育培训/全日制学校/中专=49, 教育培训/全日制学校/中考=59, 教育培训/全日制学校/初中=23, 教育培训/全日制学校/大学=10, 教育培训/全日制学校/小学=49, 教育培训/全日制学校/高中=84, 教育培训/基础教育科目/英语=27, 教育培训/基础教育科目/语文=84, 教育培训/家教=25, 教育培训/考试培训=74, 教育培训/艺术培训/美术培训=15, 教育培训/艺术培训=40, 教育培训/语言学习/英语=27, 教育培训/语言学习=9, 教育培训=95, 教育水平/高中及以下=98, 旅游酒店/交通票务/飞机票=45, 旅游酒店/国内游=64, 旅游酒店/景点类型/古城小镇=3, 旅游酒店/景点类型/名胜古迹=4, 旅游酒店/景点类型/山川峡谷=33, 旅游酒店/景点类型/文化宗教=38, 旅游酒店/景点类型/江河湖泊=3, 旅游酒店/景点类型/现代都市=9, 旅游酒店/远途出行方式/火车=24, 旅游酒店/远途出行方式/飞机=48, 旅游酒店=87, 服饰鞋包=62, 母婴亲子/孕婴保健/备孕保健=41, 母婴亲子/孕婴保健/孕期保健=15, 母婴亲子/孕婴保健/小儿保健=51, 母婴亲子/孕婴保健=66, 母婴亲子=85, 求职创业/创业=27, 求职创业=76, 汽车/中国品牌=23, 汽车/中档汽车=47, 汽车/新能源汽车/油电混合汽车=17, 汽车/新能源汽车=17, 汽车/日本品牌=22, 汽车/欧洲品牌=32, 汽车/美国品牌=21, 汽车=85, 消费水平/低=75, 游戏/PC游戏/单机游戏=41, 游戏/PC游戏/强IP/是=44, 游戏/PC游戏/操作方式/手动=44, 游戏/PC游戏/沙盒游戏=41, 游戏/PC游戏/游戏玩法/即时=44, 游戏/PC游戏/游戏画面/3D=41, 游戏/PC游戏=44, 游戏/手机游戏/单机游戏=32, 游戏/手机游戏/强IP=11, 游戏/手机游戏/操作方式=11, 游戏/手机游戏/游戏玩法=11, 游戏/手机游戏/游戏用户=11, 游戏/手机游戏/游戏画风=11, 游戏/手机游戏/网游=47, 游戏/手机游戏=57, 游戏=60, 生活服务/物流配送=46, 生活服务=53, 省份/江苏省=90, 终端/厂商/*=100, 终端/型号/*=100, 网络购物/代购=12, 网络购物/团购=44, 网络购物/海淘=12, 网络购物/电商购物平台/一淘网=12, 网络购物/电商购物平台/淘宝=17, 网络购物/电商购物平台/糯米网=9, 网络购物=77, 职业类别/专业技术人员=80, 花鸟萌宠/狗=34, 花鸟萌宠/猫=6, 花鸟萌宠/鱼=7, 花鸟萌宠=71, 资产状况/无车=97, 资讯=89, 软件应用/影音图像/视频=86, 软件应用/影音图像=86, 软件应用/理财购物/团购=93, 软件应用/理财购物/网购=88, 软件应用/理财购物=96, 软件应用/生活实用/美食=96, 软件应用/生活实用/运动健身=94, 软件应用/生活实用=97, 软件应用/系统工具/安全=88, 软件应用/系统工具/搜索=99, 软件应用/系统工具=99, 软件应用=97, 金融财经/股票/港股=32, 金融财经/贵金属/黄金=32, 金融财经/贵金属=32, 金融财经=68, 餐饮美食/休闲小食/面包甜点=40, 餐饮美食/休闲小食=40, 餐饮美食/口味/煎炸=2, 餐饮美食/口味/甜=40, 餐饮美食/口味/生鲜=61, 餐饮美食/口味/面点=40, 餐饮美食=82"

    }
]

var LabelTree = {
    data: [],
    labelTree: [],
    uvHash: {},
    currentMAC: '',
    label: [],
    init(data) {
        this.data = data;
        this.getLabel(data[0]);
        this.handleData(data);
    },
    /**
     * 获取 ‘MAC’  ‘标签/Weight’ 属性名
     * @param {*} data 
     */
    getLabel(data) {
        for (var obj in data) {
            this.label.push(obj);
        }
    },
    handleData(data) {
        data.forEach(value => {
            this.flattenArray(value);
        })
    },
    /**
     * 分割拍扁标签成数组
     * @param {*} data 
     */
    flattenArray(data) {
        // 切割多个标签
        this.currentMAC = data[this.label[0]];
        const result = data[this.label[1]].split(',');
        result.forEach((value, index) => {
            // 第一个 replace 去除 =*及后面的数字
            // 后面的replace用于去除空格
            value = value.replace(/\**=\d+/g, '').replace(/^\s\s*/, '').replace(/\s\s*$/, '').split('/');
            this.addParentToArray(value)
        })
    },
    /**
     * 将数组转换为具有父子关系的数组
     * @param {*} data 
     */
    addParentToArray(data) {
        data.forEach((value, index) => {
            if (value) {
                const parent = index === 0 ? null : data[index - 1]

                // 统计标签 UV
                this.countUv(value);

                // 判断当前标签是否已经存在
                const exists = this.labelTree.some(label => label.name === value && label.parent === parent);
                let node = {
                    parent: parent,
                    name: value,
                }
                !exists && this.labelTree.push(node);
            }
        })
    },
    /**
     * 数组转换为tree
     * @param {*} array 
     * @param {*} parent 
     * @param {*} tree 
     */
    arrayToTree(nodes, parent, tree) {
        const that = this;
        // tree = typeof tree !== 'undefined' ? tree : [];
        // parent = typeof parent !== 'undefined' ? parent : { name: null };
        // const children = array.filter(child => child.parent == parent.name);
        // if (children.length > 0) {
        //     if (parent.name == null) {
        //         tree = children;
        //     } else {
        //         parent['children'] = children
        //     }
        //     children.forEach(function (child) { that.arrayToTree(array, child) });
        // }
        // return tree;

        var map = {}, node, roots = [];
        for (var i = 0; i < nodes.length; i += 1) {
            node = nodes[i];
            node.children = [];
            map[node.name] = i; // use map to look-up the parents
            if (node.parent !== null ) {
                nodes[map[node.parent]].children.push(node);
            } else {
                roots.push(node);
            }
        }
        return roots;
    },
    handleBigArrayListToTree(array) {
        let tree = [];
        console.log(array);
        const _array = [
            array.slice(0, parseInt(array.length / 2)),
            array.slice(parseInt(array.length / 2))
        ]
        console.log(this.arrayToTree(_array[1]));
        // _array.forEach((value) => {
        //     console.log(this.arrayToTree(value));
        //     tree.concat(tree);
        // })
        return tree
    },
    /**
     * 统计标签UV数
     * @param {*} value 
     */
    countUv(value) {
        // 该标签是否已存在
        if (this.uvHash[value]) {
            // 当前标签MAC地址是否与当前遍历标签的MAC地址一致
            if (this.uvHash[value].MAC != this.currentMAC) {
                this.uvHash[value].count++;
                this.uvHash[value].MAC = this.currentMAC;
            }
        }
        else {
            this.uvHash[value] = {
                MAC: this.currentMAC,
                count: 1
            }
        }
    }
}

LabelTree.init(data);
console.log(LabelTree.arrayToTree(LabelTree.labelTree));


