'use strict'
import _ from 'underscore'
const data = [
    {
        "MAC": "DC:EE:06:22",
        "标签/Weight": "书籍阅读=8, 休闲爱好=3, 厂商/华为=100, 品类消费水平/餐饮消费水平/中=43, 城市/上海市=85, 年龄/35-44=88, 影视音乐/关注节目/东方看大剧=49, 影视音乐/关注节目/军事报道=57, 影视音乐/关注节目/加速前进=84, 影视音乐/关注节目/大玩家特搜队=49, 影视音乐/关注节目/速度与激情6=73, 影视音乐/关注节目/锦绣未央=52, 影视音乐/关注节目/防务新观察=54, 影视音乐/关注频道/CCTV-6=55, 影视音乐/关注频道/CCTV-7=55, 影视音乐/关注频道/SITV五星体育=53, 影视音乐/关注频道/(点播)=54, 影视音乐/关注频道/东方卫视=53, 影视音乐/关注频道/东方电影台=53, 影视音乐/关注频道/北京卫视=55, 影视音乐/关注频道/嘉佳卡通频道=56, 性别/男=91, 所在行业/日化百货=12, 教育水平/高中及以下=67, 汽车/中档汽车=3, 汽车=21, 消费水平/高=51, 游戏=4, 省份/上海市=90, 终端/厂商/*=100, 终端/型号/*=100, 职业类别/文职人员=70, 资产状况/无车=88, 软件应用/旅游出行/出租车=67, 软件应用/旅游出行/地图导航=76, 软件应用/旅游出行=88, 软件应用/理财购物/支付=89, 软件应用/理财购物=89, 软件应用/生活实用/天气=98, 软件应用/生活实用/运动健身=97, 软件应用/生活实用=99, 软件应用/社交通讯/电话=17, 软件应用/社交通讯=17, 软件应用=96"
    },
    {
        "MAC": "C8:F2:30:58",
        "标签/Weight": "厂商/OPPO=100, 品类消费水平/餐饮消费水平/低=50, 商务服务=8, 城市/上海市=85, 年龄/25-34=79, 影视音乐/关注节目/CCTV空中剧院=68, 影视音乐/关注节目/一线=87, 影视音乐/关注节目/一路欢笑=70, 影视音乐/关注节目/一鸣惊人=52, 影视音乐/关注节目/三国演义=74, 影视音乐/关注节目/世界斯诺克锦标赛=48, 影视音乐/关注节目/东方时空=57, 影视音乐/关注节目/中国新闻=53, 影视音乐/关注节目/九州大戏台=54, 影视音乐/关注节目/于成龙=64, 影视音乐/关注节目/光影星播客=51, 影视音乐/关注节目/共同关注=73, 影视音乐/关注节目/农广天地=52, 影视音乐/关注节目/动物世界=52, 影视音乐/关注节目/回声嘹亮=48, 影视音乐/关注节目/地理·中国=57, 影视音乐/关注节目/大内密探灵灵狗=56, 影视音乐/关注节目/大话西游3=41, 影视音乐/关注节目/天天把歌唱=54, 影视音乐/关注节目/天网=73, 影视音乐/关注节目/央视元宵晚会=37, 影视音乐/关注节目/寰宇视野=50, 影视音乐/关注节目/小镇大法官=50, 影视音乐/关注节目/开门大吉=54, 影视音乐/关注节目/我爱发明=51, 影视音乐/关注节目/文化十分=48, 影视音乐/关注节目/文明密码=53, 影视音乐/关注节目/新少林寺=47, 影视音乐/关注节目/新闻30分=52, 影视音乐/关注节目/新闻周刊=48, 影视音乐/关注节目/新闻直播间=56, 影视音乐/关注节目/新闻联播=55, 影视音乐/关注节目/无人驾驶=73, 影视音乐/关注节目/时代=49, 影视音乐/关注节目/星光大道=57, 影视音乐/关注节目/普法栏目剧=62, 影视音乐/关注节目/梨园闯关我挂帅=72, 影视音乐/关注节目/横冲直撞好莱坞=50, 影视音乐/关注节目/法律讲堂=69, 影视音乐/关注节目/热线12=52, 影视音乐/关注节目/烽火长城线=70, 影视音乐/关注节目/焦点访谈=52, 影视音乐/关注节目/环球视线=50, 影视音乐/关注节目/真相=50, 影视音乐/关注节目/纪录片=45, 影视音乐/关注节目/绣春刀=85, 影视音乐/关注节目/综艺喜乐汇=51, 影视音乐/关注节目/自然传奇=58, 影视音乐/关注节目/越战越勇=50, 影视音乐/关注节目/远方的家=51, 影视音乐/关注节目/锦绣梨园=70, 影视音乐/关注节目/雍正王朝=50, 影视音乐/关注节目/零零大冒险=47, 影视音乐/关注节目/青年霍元甲之冲出江湖=52, 影视音乐/关注节目/黄飞鸿之狮王争霸=82, 影视音乐/关注节目/黄飞鸿之王者之风=49, 影视音乐/关注频道/CCTV-10=58, 影视音乐/关注频道/CCTV-11=77, 影视音乐/关注频道/CCTV-12=78, 影视音乐/关注频道/CCTV-3=57, 影视音乐/关注频道/CCTV-4=54, 影视音乐/关注频道/CCTV-5=56, 影视音乐/关注频道/CCTV-6=63, 影视音乐/关注频道/CCTV-7=53, 影视音乐/关注频道/CCTV-8=57, 影视音乐/关注频道/CCTV-少儿=54, 影视音乐/关注频道/CCTV-新闻=62, 影视音乐/关注频道/CCTV-纪录=53, 影视音乐/关注频道/(点播)=60, 影视音乐/关注频道/环球购物=56, 影视音乐=20, 性别/男=99, 房产/房屋租赁=44, 房产=44, 教育水平/大专=57, 旅游酒店=59, 汽车/购车阶段/买车调研=44, 汽车/购车阶段/学车考驾照=51, 汽车=79, 消费水平/高=60, 生活服务=19, 省份/上海市=90, 终端/厂商/*=100, 终端/型号/*=100, 网络购物/比价=3, 网络购物=3, 资产状况/有车=100, 资讯=58, 软件应用/影音图像/音乐=64, 软件应用/影音图像=64, 软件应用/旅游出行/出租车=96, 软件应用/旅游出行/地图导航=94, 软件应用/旅游出行=97, 软件应用/理财购物/银行=91, 软件应用/理财购物=91, 软件应用/社交通讯/婚恋=58, 软件应用/社交通讯/电话=91, 软件应用/社交通讯/论坛=90, 软件应用/社交通讯=95, 软件应用/系统工具/搜索=15, 软件应用/系统工具=15, 软件应用=96"
    }
]

class LabelTree {
    constructor(data) {
        this.data = data;
        this.labelTree = [];
        this.label = [];
    }
    init() {
        this.getLabel(this.data[0]);
        this.handleData(this.data);
    }
    /**
     * 获取 ‘MAC’  ‘标签/Weight’ 属性名
     * @param {*} data 
     */
    getLabel(data) {
        for (var obj in data) {
            this.label.push(obj);
        }
    }
    handleData(data) {
        data.forEach(value => {
            this.flattenArray(value);
        })
    }
    /**
     * 分割拍扁标签成数组
     * @param {*} data 
     */
    flattenArray(data) {
        // 切割多个标签
        const result = data[this.label[1]].split(',');
        result.forEach((value, index) => {
            // 第一个 replace 去除 =*及后面的数字
            // 后面的replace用于去除空格
            value = value.replace(/\**=\d+/g, '').replace(/^\s\s*/, '').replace(/\s\s*$/, '').split('/');
            this.addParentToArray(value)
        })
    }
    /**
     * 将数组转换为具有父子关系的数组
     * @param {*} data 
     */
    addParentToArray(data) {
        data.forEach((value, index) => {
            if (value) {
                const parent = index === 0 ? null : data[index - 1]

                // 判断当前标签是否已经存在
                const exists = _.some(this.labelTree, label => label.name === value && label.parent === parent);
                let node = {
                    parent: parent,
                    name: value,
                }
                !exists && this.labelTree.push(node);
            }
        })
    }
    /**
     * 数组转换为tree
     * @param {*} array 
     * @param {*} parent 
     * @param {*} tree 
     */
    arrayToTree(array, parent, tree) {
        const that = this;
        tree = typeof tree !== 'undefined' ? tree : [];
        parent = typeof parent !== 'undefined' ? parent : { name: null };

        const children = _.filter(array, child => child.parent == parent.name);

        if (!_.isEmpty(children)) {
            if (parent.name == null) {
                tree = children;
            } else {
                parent['children'] = children
            }
            _.each(children, function (child) { that.arrayToTree(array, child) });
        }
        return tree;
    }
}

const labelTree = new LabelTree(data);
labelTree.init();
console.log(labelTree.labelTree);
// console.log(labelTree.arrayToTree(labelTree.labelTree));



